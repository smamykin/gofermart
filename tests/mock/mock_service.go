// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/contracts.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/smamykin/gofermart/internal/entity"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetUserByLogin mocks base method.
func (m *MockUserRepositoryInterface) GetUserByLogin(login string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByLogin), login)
}

// UpsertUser mocks base method.
func (m *MockUserRepositoryInterface) UpsertUser(login, pwd string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", login, pwd)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpsertUser(login, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpsertUser), login, pwd)
}

// MockOrderRepositoryInterface is a mock of OrderRepositoryInterface interface.
type MockOrderRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryInterfaceMockRecorder
}

// MockOrderRepositoryInterfaceMockRecorder is the mock recorder for MockOrderRepositoryInterface.
type MockOrderRepositoryInterfaceMockRecorder struct {
	mock *MockOrderRepositoryInterface
}

// NewMockOrderRepositoryInterface creates a new mock instance.
func NewMockOrderRepositoryInterface(ctrl *gomock.Controller) *MockOrderRepositoryInterface {
	mock := &MockOrderRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryInterface) EXPECT() *MockOrderRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderRepositoryInterface) AddOrder(order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderRepositoryInterfaceMockRecorder) AddOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).AddOrder), order)
}

// GetOrderByOrderNumber mocks base method.
func (m *MockOrderRepositoryInterface) GetOrderByOrderNumber(orderNumber int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByOrderNumber", orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrderByOrderNumber indicates an expected call of GetOrderByOrderNumber.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetOrderByOrderNumber(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByOrderNumber", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetOrderByOrderNumber), orderNumber)
}

// MockHashGeneratorInterface is a mock of HashGeneratorInterface interface.
type MockHashGeneratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHashGeneratorInterfaceMockRecorder
}

// MockHashGeneratorInterfaceMockRecorder is the mock recorder for MockHashGeneratorInterface.
type MockHashGeneratorInterfaceMockRecorder struct {
	mock *MockHashGeneratorInterface
}

// NewMockHashGeneratorInterface creates a new mock instance.
func NewMockHashGeneratorInterface(ctrl *gomock.Controller) *MockHashGeneratorInterface {
	mock := &MockHashGeneratorInterface{ctrl: ctrl}
	mock.recorder = &MockHashGeneratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashGeneratorInterface) EXPECT() *MockHashGeneratorInterfaceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockHashGeneratorInterface) Generate(stringToHash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", stringToHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockHashGeneratorInterfaceMockRecorder) Generate(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHashGeneratorInterface)(nil).Generate), stringToHash)
}

// IsEqual mocks base method.
func (m *MockHashGeneratorInterface) IsEqual(hashedPassword, plainTxtPwd string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEqual", hashedPassword, plainTxtPwd)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEqual indicates an expected call of IsEqual.
func (mr *MockHashGeneratorInterfaceMockRecorder) IsEqual(hashedPassword, plainTxtPwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEqual", reflect.TypeOf((*MockHashGeneratorInterface)(nil).IsEqual), hashedPassword, plainTxtPwd)
}
