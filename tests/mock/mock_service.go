// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/user_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/smamykin/gofermart/internal/entity"
)

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// GetUserByLogin mocks base method.
func (m *MockStorageInterface) GetUserByLogin(login string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockStorageInterfaceMockRecorder) GetUserByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockStorageInterface)(nil).GetUserByLogin), login)
}

// UpsertUser mocks base method.
func (m *MockStorageInterface) UpsertUser(login, pwd string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", login, pwd)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockStorageInterfaceMockRecorder) UpsertUser(login, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockStorageInterface)(nil).UpsertUser), login, pwd)
}

// MockHashGeneratorInterface is a mock of HashGeneratorInterface interface.
type MockHashGeneratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHashGeneratorInterfaceMockRecorder
}

// MockHashGeneratorInterfaceMockRecorder is the mock recorder for MockHashGeneratorInterface.
type MockHashGeneratorInterfaceMockRecorder struct {
	mock *MockHashGeneratorInterface
}

// NewMockHashGeneratorInterface creates a new mock instance.
func NewMockHashGeneratorInterface(ctrl *gomock.Controller) *MockHashGeneratorInterface {
	mock := &MockHashGeneratorInterface{ctrl: ctrl}
	mock.recorder = &MockHashGeneratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashGeneratorInterface) EXPECT() *MockHashGeneratorInterfaceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockHashGeneratorInterface) Generate(stringToHash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", stringToHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockHashGeneratorInterfaceMockRecorder) Generate(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHashGeneratorInterface)(nil).Generate), stringToHash)
}

// IsEqual mocks base method.
func (m *MockHashGeneratorInterface) IsEqual(hashedPassword, plainTxtPwd string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEqual", hashedPassword, plainTxtPwd)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEqual indicates an expected call of IsEqual.
func (mr *MockHashGeneratorInterfaceMockRecorder) IsEqual(hashedPassword, plainTxtPwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEqual", reflect.TypeOf((*MockHashGeneratorInterface)(nil).IsEqual), hashedPassword, plainTxtPwd)
}
